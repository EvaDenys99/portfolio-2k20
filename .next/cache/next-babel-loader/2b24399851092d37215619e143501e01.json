{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _ref,\n        variables,\n        res,\n        json,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables;\n            _context.next = 3;\n            return fetch(\"\".concat(process.env.API_URL, \"/graphql\"), {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            json = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 10;\n              break;\n            }\n\n            console.error(json.errors);\n            throw new Error(\"Failed to fetch API\");\n\n          case 10:\n            return _context.abrupt(\"return\", json.data);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getProjects() {\n  return _getProjects.apply(this, arguments);\n}\n\nfunction _getProjects() {\n  _getProjects = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetchAPI(\"query Projects {\\n        projects {\\n          id\\n          title\\n          creationDate\\n          headImage {\\n            url\\n          }\\n          categories {\\n            id\\n            name\\n          }\\n        }\\n      }\");\n\n          case 2:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.projects);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getProjects.apply(this, arguments);\n}\n\nexport function getProject(_x2) {\n  return _getProject.apply(this, arguments);\n}\n\nfunction _getProject() {\n  _getProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchAPI(\"query Projects($id: ID!) {\\n        project(id: $id) {\\n          id\\n          title\\n          bio\\n          creationDate\\n          headImage {\\n            url\\n            caption\\n          }\\n          images {\\n            url\\n            caption\\n          }\\n          vids {\\n            url\\n            caption\\n          }\\n          categories {\\n            id\\n            name\\n          }\\n          team\\n          client\\n          tools\\n          link\\n          briefing\\n          goal\\n          download {\\n            url\\n            name\\n          }\\n        }\\n      }\", {\n              variables: {\n                id: id\n              }\n            });\n\n          case 2:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data.project);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getProject.apply(this, arguments);\n}\n\nexport function getCategories() {\n  return _getCategories.apply(this, arguments);\n}\n\nfunction _getCategories() {\n  _getCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetchAPI(\"query Categories {\\n      categories {\\n        id\\n        name\\n      }\\n    }\");\n\n          case 2:\n            data = _context4.sent;\n            return _context4.abrupt(\"return\", data.categories);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getCategories.apply(this, arguments);\n}\n\nexport function getCategoryProjects(_x3) {\n  return _getCategoryProjects.apply(this, arguments);\n}\n\nfunction _getCategoryProjects() {\n  _getCategoryProjects = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return fetchAPI(\"query Category($id: ID!) {\\n        category(id: $id) {\\n          name\\n          projects {\\n            id\\n            title\\n            creationDate\\n            headImage {\\n              url\\n            }\\n            categories {\\n              id\\n              name\\n            }\\n          }\\n        }\\n      }\", {\n              variables: {\n                id: id\n              }\n            });\n\n          case 2:\n            data = _context5.sent;\n            return _context5.abrupt(\"return\", data.category.projects);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getCategoryProjects.apply(this, arguments);\n}\n\nexport function getCategoryArticles(_x4) {\n  return _getCategoryArticles.apply(this, arguments);\n}\n\nfunction _getCategoryArticles() {\n  _getCategoryArticles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return fetchAPI(\"query Category($id: ID!) {\\n        category(id: $id) {\\n          name\\n          blogs {\\n            id\\n            title\\n            creationdate\\n            description\\n            headImage {\\n              url\\n            }\\n            categories {\\n              id\\n              name\\n            }\\n          }\\n        }\\n      }\", {\n              variables: {\n                id: id\n              }\n            });\n\n          case 2:\n            data = _context6.sent;\n            return _context6.abrupt(\"return\", data.category.blogs);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getCategoryArticles.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/evadenys/Desktop/portfolio/development/frontend/lib/api.js"],"names":["fetchAPI","query","variables","fetch","process","env","API_URL","method","headers","body","JSON","stringify","res","json","errors","console","error","Error","data","getProjects","projects","getProject","id","project","getCategories","categories","getCategoryProjects","category","getCategoryArticles","blogs"],"mappings":";;;SAAeA,Q;;;;;uEAAf,iBAAwBC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2EAA+C,EAA/C,EAAiCC,SAAjC,QAAiCA,SAAjC;AAAA;AAAA,mBACoBC,KAAK,WAAIC,OAAO,CAACC,GAAR,CAAYC,OAAhB,eAAmC;AACxDC,cAAAA,MAAM,EAAE,MADgD;AAExDC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAF+C;AAKxDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,gBAAAA,KAAK,EAALA,KADmB;AAEnBC,gBAAAA,SAAS,EAATA;AAFmB,eAAf;AALkD,aAAnC,CADzB;;AAAA;AACQU,YAAAA,GADR;AAAA;AAAA,mBAYqBA,GAAG,CAACC,IAAJ,EAZrB;;AAAA;AAYQA,YAAAA,IAZR;;AAAA,iBAaMA,IAAI,CAACC,MAbX;AAAA;AAAA;AAAA;;AAcIC,YAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AAdJ,kBAeU,IAAIG,KAAJ,CAAU,qBAAV,CAfV;;AAAA;AAAA,6CAkBSJ,IAAI,CAACK,IAlBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBA,gBAAsBC,WAAtB;AAAA;AAAA;;;0EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcnB,QAAQ,+OADtB;;AAAA;AACCkB,YAAAA,IADD;AAAA,8CAeEA,IAAI,CAACE,QAfP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBP,gBAAsBC,UAAtB;AAAA;AAAA;;;yEAAO,kBAA0BC,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACctB,QAAQ,+lBAmCzB;AAAEE,cAAAA,SAAS,EAAE;AAAEoB,gBAAAA,EAAE,EAAFA;AAAF;AAAb,aAnCyB,CADtB;;AAAA;AACCJ,YAAAA,IADD;AAAA,8CAsCEA,IAAI,CAACK,OAtCP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAyCP,gBAAsBC,aAAtB;AAAA;AAAA;;;4EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcxB,QAAQ,oFADtB;;AAAA;AACCkB,YAAAA,IADD;AAAA,8CAOEA,IAAI,CAACO,UAPP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsBC,mBAAtB;AAAA;AAAA;;;kFAAO,kBAAmCJ,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACctB,QAAQ,0UAkBzB;AAAEE,cAAAA,SAAS,EAAE;AAAEoB,gBAAAA,EAAE,EAAFA;AAAF;AAAb,aAlByB,CADtB;;AAAA;AACCJ,YAAAA,IADD;AAAA,8CAqBEA,IAAI,CAACS,QAAL,CAAcP,QArBhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAwBP,gBAAsBQ,mBAAtB;AAAA;AAAA;;;kFAAO,kBAAmCN,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACctB,QAAQ,gWAmBzB;AAAEE,cAAAA,SAAS,EAAE;AAAEoB,gBAAAA,EAAE,EAAFA;AAAF;AAAb,aAnByB,CADtB;;AAAA;AACCJ,YAAAA,IADD;AAAA,8CAsBEA,IAAI,CAACS,QAAL,CAAcE,KAtBhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["async function fetchAPI(query, { variables } = {}) {\n  const res = await fetch(`${process.env.API_URL}/graphql`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n\n  const json = await res.json();\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error(\"Failed to fetch API\");\n  }\n\n  return json.data;\n}\n\nexport async function getProjects() {\n  const data = await fetchAPI(`query Projects {\n        projects {\n          id\n          title\n          creationDate\n          headImage {\n            url\n          }\n          categories {\n            id\n            name\n          }\n        }\n      }`);\n  return data.projects;\n}\n\nexport async function getProject(id) {\n  const data = await fetchAPI(\n    `query Projects($id: ID!) {\n        project(id: $id) {\n          id\n          title\n          bio\n          creationDate\n          headImage {\n            url\n            caption\n          }\n          images {\n            url\n            caption\n          }\n          vids {\n            url\n            caption\n          }\n          categories {\n            id\n            name\n          }\n          team\n          client\n          tools\n          link\n          briefing\n          goal\n          download {\n            url\n            name\n          }\n        }\n      }`,\n    { variables: { id } }\n  );\n  return data.project;\n}\n\nexport async function getCategories() {\n  const data = await fetchAPI(`query Categories {\n      categories {\n        id\n        name\n      }\n    }`);\n  return data.categories;\n}\n\nexport async function getCategoryProjects(id) {\n  const data = await fetchAPI(\n    `query Category($id: ID!) {\n        category(id: $id) {\n          name\n          projects {\n            id\n            title\n            creationDate\n            headImage {\n              url\n            }\n            categories {\n              id\n              name\n            }\n          }\n        }\n      }`,\n    { variables: { id } }\n  );\n  return data.category.projects;\n}\n\nexport async function getCategoryArticles(id) {\n  const data = await fetchAPI(\n    `query Category($id: ID!) {\n        category(id: $id) {\n          name\n          blogs {\n            id\n            title\n            creationdate\n            description\n            headImage {\n              url\n            }\n            categories {\n              id\n              name\n            }\n          }\n        }\n      }`,\n    { variables: { id } }\n  );\n  return data.category.blogs;\n}\n"]},"metadata":{},"sourceType":"module"}